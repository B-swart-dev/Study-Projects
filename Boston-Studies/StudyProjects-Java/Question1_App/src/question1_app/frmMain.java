/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package question1_app;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lastp
 */
public class frmMain extends javax.swing.JFrame {
    String strButtonAddTest;
    String strGender = null;
    String strURL = "jdbc:mysql://localhost:3306/patients_db?zeroDateTimeBehavior=convertToNull";
    String strUsername = "root";
    String strPass = "Password";
    String strID;
    int selectedRowIndex;
    
    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
        loadTblData();
        tblSql.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("patients_db?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        patientsRecordsQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM PatientsRecords p");
        patientsRecordsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : patientsRecordsQuery.getResultList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rdMale = new javax.swing.JRadioButton();
        rdFemale = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cboDay = new javax.swing.JComboBox<>();
        cboMonth = new javax.swing.JComboBox<>();
        txtYear = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtReason = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSql = new javax.swing.JTable();
        btnDel = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Question 1 Medical Patient Program");

        jLabel1.setText("Name: ");

        jLabel2.setText("Surname: ");

        jLabel3.setText("Email:");

        jLabel4.setText("Gender: ");

        rdMale.setText("Male");
        rdMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMaleActionPerformed(evt);
            }
        });

        rdFemale.setText("Female");
        rdFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdFemaleActionPerformed(evt);
            }
        });

        jLabel5.setText("Birth Date");

        cboDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cboMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });
        txtYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYearKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtYearKeyTyped(evt);
            }
        });

        jLabel7.setText("Day: ");

        jLabel8.setText("Month: ");

        jLabel9.setText("Year: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel6.setText("Reason For Visit: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtReason)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 285, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtReason, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnAdd.setText("CAPTURE");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblSql.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSqlMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSql);

        btnDel.setText("DELETE");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnRefresh.setText("REFRESH/VIEW TABLE");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnEdit.setText("EDIT");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel1)
                                                    .addComponent(jLabel2))
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSurname)
                                                    .addComponent(txtName)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(rdMale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                                        .addComponent(rdFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblID))
                                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(rdMale)
                            .addComponent(rdFemale))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnDel))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAdd)
                                .addComponent(btnEdit)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void loadTblData() {
    DefaultTableModel model = new DefaultTableModel();


    model.setColumnIdentifiers(new Object[] {"ID", "First Name", "Last Name","Gender", "Email", "Birth Date", "Reason for Visit"});

    tblSql.setModel(model);

    try (Connection connection = DriverManager.getConnection(strURL, strUsername, strPass)) {
        String query = "SELECT * FROM patients_db.patients_records";
        PreparedStatement statement = connection.prepareStatement(query);
        ResultSet resultSet = statement.executeQuery();

        // Clear the existing rows from the table
        model.setRowCount(0);

        while (resultSet.next()) {
            String strID1 = resultSet.getString("id");
            String strName1 = resultSet.getString("first_name");
            String strSurname1 = resultSet.getString("last_name");
            String strGender1 = resultSet.getString("gender");
            String strEmail1 = resultSet.getString("email");
            String strBirth1 = resultSet.getString("birth_date");
            String strReason1 = resultSet.getString("reason_for_visit");
            model.addRow(new Object[]{strID1, strName1, strSurname1,strGender1, strEmail1, strBirth1, strReason1});
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    private void rdMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMaleActionPerformed
        if (rdMale.isSelected()){
           rdFemale.setSelected(false);
       }
    }//GEN-LAST:event_rdMaleActionPerformed

    private void rdFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdFemaleActionPerformed
        if (rdFemale.isSelected()){
           rdMale.setSelected(false);
       }
    }//GEN-LAST:event_rdFemaleActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        strButtonAddTest = btnAdd.getText();
        if (strButtonAddTest.equals("CAPTURE")){
        String strName,strSurname,strEmail,strBirth,strReason;
        strName = txtName.getText();
        strSurname = txtSurname.getText();
        strEmail = txtEmail.getText();
        strReason = txtReason.getText();
        String strYear = txtYear.getText();
        if (strYear.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter a year of birth for the patient");
            return;
        } 
         int intTest = Integer.parseInt(strYear);
            if (intTest >= 1924 && intTest <= 2024) {
                strBirth = strYear + "-" + cboMonth.getSelectedItem().toString() + "-" + cboDay.getSelectedItem().toString();
            } else {
                JOptionPane.showMessageDialog(null, "Please select a year between 1924 and 2024");
                return;
            }
        
         if (rdMale.isSelected()){
           strGender = "Male";
       }
         if (rdFemale.isSelected()){
           strGender = "Female";
       }
        if (strGender.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please select the patients gender");
            return;
        }
        // Check if any of the variables are empty
if (strName.isEmpty() || strSurname.isEmpty() || strEmail.isEmpty() || strGender.isEmpty() || strBirth.isEmpty() || strReason.isEmpty()) {
    JOptionPane.showMessageDialog(null,"Please check that all fields are filled in");
    return; // Exit the method if any field is empty
}

// Check the length of each variable
if (strName.length() >= 50) {
    JOptionPane.showMessageDialog(null,"Please check name so that it does not exceed 50 characters");
    return; 
}
if (strSurname.length() >= 50){
    JOptionPane.showMessageDialog(null,"Please check surname that it does not exceed 50 characters");
    return; 
}
if (strEmail.length() >= 255) {
    JOptionPane.showMessageDialog(null,"Please check email that it does not exceed 255 characters");
    return;
}  

        try {
            Connection conn = DriverManager.getConnection(strURL, strUsername, strPass);
            String sql = "INSERT INTO patients_db.patients_records(first_name, last_name,gender, email, birth_date, reason_for_visit) VALUES (?, ?, ?, ?, ?,?)";
            PreparedStatement statement = conn.prepareStatement(sql);

            
            statement.setString(1, strName);   
            statement.setString(2, strSurname); 
            statement.setString(3, strGender);  
            statement.setString(4, strEmail);    
            statement.setString(5, strBirth);    
            statement.setString(6, strReason); 
 
            statement.executeUpdate();
            statement.close();
            

            System.out.println("Data inserted successfully!");
            JOptionPane.showMessageDialog(null, "Date inserted succesfully");
            conn.close();
            DefaultTableModel model = (DefaultTableModel) tblSql.getModel();
            model.setRowCount(0); 
            loadTblData(); 
        } catch (SQLException e) {
            e.printStackTrace();
        }
        }
        if (strButtonAddTest.equals("APPEND")){
            updateRecord(strID);
            lblID.setText("");
        }

    }//GEN-LAST:event_btnAddActionPerformed
    
    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
         
    }//GEN-LAST:event_txtYearActionPerformed

    private void txtYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearKeyPressed

    private void txtYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearKeyTyped
       int maxLength = 4; 

    if (txtYear.getText().length() >= maxLength) {
        evt.consume(); 
    }
        char c = evt.getKeyChar();
       if(!Character.isDigit(c)){ evt.consume(); } 
    }//GEN-LAST:event_txtYearKeyTyped

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadTblData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
    selectedRowIndex = tblSql.getSelectedRow();

    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to delete from table");
        return;
                                }

    String selectedID = tblSql.getValueAt(selectedRowIndex, 0).toString();

    try (Connection connection = DriverManager.getConnection(strURL, strUsername, strPass)) {
        String query = "DELETE FROM patients_db.patients_records WHERE id = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, selectedID);
        statement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Failed to delete the selected patient row");
        return;
    }
    DefaultTableModel model = (DefaultTableModel) tblSql.getModel();
    model.removeRow(selectedRowIndex);
    JOptionPane.showMessageDialog(null, "Patients info was deleted successfully.");
    }//GEN-LAST:event_btnDelActionPerformed
    
private void updateRecord(String selectedID) {
    // Retrieve the modified values
    String strName = txtName.getText();
    String strSurname = txtSurname.getText();
    String strEmail = txtEmail.getText();
    String strReason = txtReason.getText();
    String strYear = txtYear.getText();
      if (rdMale.isSelected()){
           strGender = "Male";
       }
         if (rdFemale.isSelected()){
           strGender = "Female";
       }
        if (strGender.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select the patients gender");
            return;
        }
        if (strGender.equals("Sad")){
            JOptionPane.showMessageDialog(null, "Please select the patients gender");
            return;
        }
    String  strBirth = strYear + "-" + cboMonth.getSelectedItem().toString() + "-" + cboDay.getSelectedItem().toString();

    // Run the UPDATE query to the SQL table
    String query = "UPDATE patients_db.patients_records SET first_name = ?, last_name = ?, " +
            "gender = ?, email = ?, birth_date = ?, reason_for_visit = ? WHERE id = ?";

    try (Connection connection = DriverManager.getConnection(strURL, strUsername, strPass);
         PreparedStatement statement = connection.prepareStatement(query)) {

        // Set the values for the UPDATE query
        statement.setString(1, strName);
        statement.setString(2, strSurname);
        statement.setString(3, strGender);
        statement.setString(4, strEmail);
        statement.setString(5, strBirth);
        statement.setString(6, strReason);
        statement.setString(7, selectedID);

        // Execute the UPDATE query
        statement.executeUpdate();

        // Update the row in the table model with corresponding data
        DefaultTableModel model = (DefaultTableModel) tblSql.getModel();
        model.setValueAt(strName, selectedRowIndex, 1);
        model.setValueAt(strSurname, selectedRowIndex, 2);
        model.setValueAt(strGender, selectedRowIndex, 3);
        model.setValueAt(strEmail, selectedRowIndex, 4);
        model.setValueAt(strBirth, selectedRowIndex, 5);
        model.setValueAt(strReason, selectedRowIndex, 6);

        // Enable the buttons after its completed 
        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);
        btnRefresh.setEnabled(true);
        btnAdd.setText("CAPTURE");
        JOptionPane.showMessageDialog(null, "Record updated successfully.");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Failed to update the record.");
    }
}
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    selectedRowIndex = tblSql.getSelectedRow();

    if (selectedRowIndex == -1) {
        //Test if there is a row selected
        JOptionPane.showMessageDialog(null, "Please select a row to edit from the table");
        return;
    }

    strID = tblSql.getValueAt(selectedRowIndex, 0).toString();
    String strName = tblSql.getValueAt(selectedRowIndex, 1).toString();
    String strSurname = tblSql.getValueAt(selectedRowIndex, 2).toString();
    strGender = tblSql.getValueAt(selectedRowIndex, 3).toString();
    String strEmail = tblSql.getValueAt(selectedRowIndex, 4).toString();
    String strBirth = tblSql.getValueAt(selectedRowIndex, 5).toString();
    String strReason = tblSql.getValueAt(selectedRowIndex, 6).toString();

    // Set the retrieved values to the correct places
    lblID.setText("ID: "+ strID);
    txtName.setText(strName);
    txtSurname.setText(strSurname);
    txtEmail.setText(strEmail);
    txtReason.setText(strReason);
    
    if (strGender.equals("Male")) {
    rdMale.setSelected(true);
    rdFemale.setSelected(false);
        } else if (strGender.equals("Female")) {
    rdMale.setSelected(false);
    rdFemale.setSelected(true);
        } else {
    rdMale.setSelected(false);
    rdFemale.setSelected(false);
               }
    
    // Split the birth date string so it can be brought back into the program correctly
    String[] birthParts = strBirth.split("-");
    if (birthParts.length == 3) {
        txtYear.setText(birthParts[0]);
        cboMonth.setSelectedItem(birthParts[1]);
        cboDay.setSelectedItem(birthParts[2]);
        
        
    } else {
        JOptionPane.showMessageDialog(null, "Invalid birth date format.");
        return;
    }
    // Disables the edit,delete,refresh buttons until the user is done with edit
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);
    btnRefresh.setEnabled(false);
    btnAdd.setEnabled(true);
    btnAdd.setText("APPEND");
    }//GEN-LAST:event_btnEditActionPerformed

    private void tblSqlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSqlMouseClicked
        boolean a = tblSql.isEditing();
        if(a == false){
            JOptionPane.showMessageDialog(null, "You can not manually edit the table");
        }
    }//GEN-LAST:event_tblSqlMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cboDay;
    private javax.swing.JComboBox<String> cboMonth;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblID;
    private java.util.List<question1_app.PatientsRecords> patientsRecordsList;
    private javax.persistence.Query patientsRecordsQuery;
    private javax.swing.JRadioButton rdFemale;
    private javax.swing.JRadioButton rdMale;
    private javax.swing.JTable tblSql;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtReason;
    private javax.swing.JTextField txtSurname;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
